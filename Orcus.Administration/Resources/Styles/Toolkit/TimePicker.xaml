<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />

    <Style x:Key="TimeItemStyle" TargetType="ListBoxItem">
        <Style.Setters>
            <Setter Property="Padding" Value="4" />
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ListItemHover}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TimePickerToggleButtonStyle"
           BasedOn="{StaticResource MetroToggleButton}"
           TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <xctk:ButtonChrome x:Name="ToggleButtonChrome"
                                           CornerRadius="0,2.75,2.75,0"
                                           RenderChecked="{Binding IsOpen,
                                                                   RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                  AncestorType=xctk:TimePicker}}"
                                           RenderEnabled="{Binding IsEnabled,
                                                                   RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                  AncestorType=xctk:TimePicker}}"
                                           RenderMouseOver="{TemplateBinding IsMouseOver}"
                                           RenderPressed="{TemplateBinding IsPressed}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <Grid x:Name="arrowGlyph"
                                      Grid.Column="1"
                                      Margin="5"
                                      IsHitTestVisible="False">
                                    <Path x:Name="Arrow"
                                          Width="7"
                                          Height="4"
                                          Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                                          Fill="#FF000000" />
                                </Grid>
                            </Grid>
                        </xctk:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:TimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:TimePicker}">
                    <Grid x:Name="root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <xctk:ButtonSpinner x:Name="PART_Spinner"
                                            HorizontalContentAlignment="Stretch"
                                            VerticalContentAlignment="Stretch"
                                            AllowSpin="{TemplateBinding AllowSpin}"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                            IsTabStop="False"
                                            ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                            <TextBox x:Name="PART_TextBox"
                                     MinWidth="20"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     AcceptsReturn="False"
                                     Background="Transparent"
                                     BorderThickness="0"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontSize="{TemplateBinding FontSize}"
                                     FontStretch="{TemplateBinding FontStretch}"
                                     FontStyle="{TemplateBinding FontStyle}"
                                     FontWeight="{TemplateBinding FontWeight}"
                                     IsUndoEnabled="{Binding IsUndoEnabled,
                                                             RelativeSource={RelativeSource TemplatedParent}}"
                                     Padding="{TemplateBinding Padding}"
                                     TabIndex="{TemplateBinding TabIndex}"
                                     Text="{Binding Text,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                     TextAlignment="{TemplateBinding TextAlignment}"
                                     TextWrapping="NoWrap">
                                <TextBox.Style>
                                    <Style TargetType="TextBox">
                                        <Setter Property="SelectionBrush" Value="{DynamicResource HighlightBrush}" />
                                        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
                                        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
                                        <Setter Property="CaretBrush" Value="{DynamicResource BlackBrush}" />
                                        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                                        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                                        <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}" />
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </xctk:ButtonSpinner>
                        <Popup x:Name="PART_Popup"
                               Grid.Column="0"
                               AllowsTransparency="True"
                               IsOpen="{Binding IsChecked,
                                                ElementName=_timePickerToggleButton}"
                               StaysOpen="False">
                            <Border MinWidth="{Binding ActualWidth,
                                                       ElementName=root}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    Background="{StaticResource WhiteBrush}"
                                    BorderBrush="{StaticResource GrayBrush2}"
                                    BorderThickness="1">
                                <Grid>
                                    <ListBox x:Name="PART_TimeListItems"
                                             BorderThickness="0"
                                             DisplayMemberPath="Display"
                                             ItemContainerStyle="{StaticResource TimeItemStyle}" />
                                </Grid>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="_timePickerToggleButton"
                                      Grid.Column="1"
                                      MinHeight="15"
                                      controls:ControlsHelper.CornerRadius="0,1,1,0"
                                      Background="{StaticResource WhiteBrush}"
                                      Focusable="False"
                                      IsChecked="{Binding IsOpen,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      IsEnabled="{Binding IsReadOnly,
                                                          RelativeSource={RelativeSource TemplatedParent},
                                                          Converter={StaticResource InverseBoolConverter}}"
                                      IsHitTestVisible="{Binding IsOpen,
                                                                 RelativeSource={RelativeSource TemplatedParent},
                                                                 Converter={StaticResource InverseBoolConverter}}"
                                      Style="{StaticResource MetroToggleButton}"
                                      Visibility="{TemplateBinding ShowDropDownButton,
                                                                   Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid x:Name="Root">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoverPath" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Blur" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard />
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Path Width="10"
                                      Height="6"
                                      Margin="0.5,0,0.5,0"
                                      Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                      Fill="{DynamicResource GrayBrush1}"
                                      Stretch="Uniform" />
                                <Path x:Name="HoverPath"
                                      Width="10"
                                      Height="6"
                                      Margin="0.5,0,0.5,0"
                                      Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                      Fill="{DynamicResource BlackBrush}"
                                      Opacity="0"
                                      Stretch="Uniform"
                                      UseLayoutRounding="False" />
                                <Path x:Name="Blur"
                                      Width="10"
                                      Height="6"
                                      Margin="0.5,0,0.5,0"
                                      Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                      Fill="{DynamicResource BlackBrush}"
                                      Opacity="0"
                                      Stretch="Uniform"
                                      UseLayoutRounding="False">
                                    <Path.Effect>
                                        <BlurEffect />
                                    </Path.Effect>
                                </Path>
                                <Rectangle x:Name="DisabledElement"
                                           Fill="{DynamicResource WhiteBrush}"
                                           Opacity="0"
                                           RadiusX="2"
                                           RadiusY="2" />
                            </Grid>
                        </ToggleButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>