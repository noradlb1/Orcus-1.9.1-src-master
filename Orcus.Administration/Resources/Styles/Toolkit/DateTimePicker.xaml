<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Margin="0,0,3,0"
                        Content="{Binding}"
                        Focusable="False"
                        Foreground="Gray" />
    </DataTemplate>

    <Style TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Stretch"
                                                    AllowSpin="{TemplateBinding AllowSpin}"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                    IsTabStop="False"
                                                    ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <TextBox x:Name="PART_TextBox"
                                             MinWidth="20"
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                             AcceptsReturn="False"
                                             Background="Transparent"
                                             BorderThickness="0" Padding="0"
                                             FontFamily="{TemplateBinding FontFamily}"
                                             FontSize="{TemplateBinding FontSize}"
                                             FontStretch="{TemplateBinding FontStretch}"
                                             FontStyle="{TemplateBinding FontStyle}"
                                             FontWeight="{TemplateBinding FontWeight}"
                                             Foreground="{TemplateBinding Foreground}"
                                             IsUndoEnabled="{Binding IsUndoEnabled,
                                                                     RelativeSource={RelativeSource TemplatedParent}}"
                                             TabIndex="{TemplateBinding TabIndex}"
                                             Text="{Binding Text,
                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                             TextAlignment="{TemplateBinding TextAlignment}"
                                             TextWrapping="NoWrap">
                                        <TextBox.Style>
                                            <Style TargetType="TextBox">
                                                <Setter Property="SelectionBrush" Value="{DynamicResource HighlightBrush}" />
                                                <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
                                                <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
                                                <Setter Property="CaretBrush" Value="{DynamicResource BlackBrush}" />
                                                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                                                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                                                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}" />
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                              Grid.Column="1"
                                              controls:ControlsHelper.CornerRadius="0,1,1,0"
                                              Background="{StaticResource WhiteBrush}"
                                              Focusable="False" MinHeight="15"
                                              IsChecked="{Binding IsOpen,
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                              IsEnabled="{Binding IsReadOnly,
                                                                  RelativeSource={RelativeSource TemplatedParent},
                                                                  Converter={StaticResource InverseBoolConverter}}"
                                              IsHitTestVisible="{Binding IsOpen,
                                                                         RelativeSource={RelativeSource TemplatedParent},
                                                                         Converter={StaticResource InverseBoolConverter}}"
                                              Style="{StaticResource MetroToggleButton}"
                                              Visibility="{TemplateBinding ShowDropDownButton,
                                                                           Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid x:Name="Root">
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HoverPath" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Blur" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard />
                                                </VisualState>
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Path Width="10"
                                              Height="6"
                                              Margin="0.5,0,0.5,0"
                                              Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                              Fill="{DynamicResource GrayBrush1}"
                                              Stretch="Uniform" />
                                        <Path x:Name="HoverPath"
                                              Width="10"
                                              Height="6"
                                              Margin="0.5,0,0.5,0"
                                              Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                              Fill="{DynamicResource BlackBrush}"
                                              Opacity="0"
                                              Stretch="Uniform"
                                              UseLayoutRounding="False" />
                                        <Path x:Name="Blur"
                                              Width="10"
                                              Height="6"
                                              Margin="0.5,0,0.5,0"
                                              Data="F1 M 531.107,321.943L 541.537,321.943L 536.322,328.042L 531.107,321.943 Z "
                                              Fill="{DynamicResource BlackBrush}"
                                              Opacity="0"
                                              Stretch="Uniform"
                                              UseLayoutRounding="False">
                                            <Path.Effect>
                                                <BlurEffect />
                                            </Path.Effect>
                                        </Path>
                                        <Rectangle x:Name="DisabledElement"
                                                   Fill="{DynamicResource WhiteBrush}"
                                                   Opacity="0"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding IsChecked,
                                                    ElementName=_calendarToggleButton}"
                                   StaysOpen="False">
                                <Border Background="{StaticResource WhiteBrush}"
                                        BorderBrush="{StaticResource GrayBrush2}"
                                        BorderThickness="1"
                                        Padding="3">
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" />
                                        <xctk:TimePicker x:Name="PART_TimeUpDown"
                                                         AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                                         Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                                         ClipValueToMinMax="{Binding ClipValueToMinMax,
                                                                                     RelativeSource={RelativeSource TemplatedParent}}"
                                                         Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                                         Format="{TemplateBinding TimeFormat}"
                                                         FormatString="{TemplateBinding TimeFormatString}"
                                                         IsUndoEnabled="{Binding IsUndoEnabled,
                                                                                 RelativeSource={RelativeSource TemplatedParent}}"
                                                         Kind="{Binding Kind,
                                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                                         Maximum="{Binding Maximum,
                                                                           RelativeSource={RelativeSource TemplatedParent}}"
                                                         Minimum="{Binding Minimum,
                                                                           RelativeSource={RelativeSource TemplatedParent}}"
                                                         ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                                         Visibility="{TemplateBinding TimePickerVisibility}" Height="20"
                                                         Watermark="{TemplateBinding TimeWatermark}"
                                                         WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                                         Value="{Binding Value,
                                                                         RelativeSource={RelativeSource TemplatedParent}}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>